% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_marginalcontrasts.R,
%   R/get_marginaleffects.R, R/get_marginalmeans.R
\name{get_marginalcontrasts}
\alias{get_marginalcontrasts}
\alias{get_marginaleffects}
\alias{get_marginalmeans}
\title{Easy 'avg_predictions' and 'avg_slopes'}
\usage{
get_marginalcontrasts(
  model,
  contrast = NULL,
  by = NULL,
  predict = NULL,
  method = "pairwise",
  ci = 0.95,
  ...
)

get_marginaleffects(model, trend = NULL, by = NULL, ...)

get_marginalmeans(
  model,
  by = "auto",
  predict = NULL,
  ci = 0.95,
  transform = NULL,
  ...
)
}
\arguments{
\item{model}{A statistical model.}

\item{contrast}{A character vector indicating the name of the variable(s)
for which to compute the contrasts.}

\item{by}{The predictor variable(s) at which to evaluate the desired effect
/ mean / contrasts. Other predictors of the model that are not included
here will be collapsed and "averaged" over (the effect will be estimated
across them).}

\item{predict}{Can be used to easily modulate the \code{type} argument in
\code{marginaleffects::avg_predictions()}. Can be \code{"link"}, \code{"response"} or any
valid \code{type} option supported by \strong{marginaleffects} (which depends on the
model-class). \code{"link"} will leave the values on scale of the linear
predictors. \code{"response"} will transform them on scale of the response
variable. Thus for a logistic model, \code{"link"} will give estimations expressed
in log-odds (probabilities on logit scale) and \code{"response"} in terms of
probabilities. To predict distributional parameters (called "dpar" in other
packages), for instance when using complex formulae in \code{brms} models, the
\code{predict} argument can take the value of the parameter you want to estimate,
for instance \code{"sigma"}, \code{"kappa"}, etc.}

\item{method}{Contrast method, respectively a formulation of the hypothesis
to test. See \href{https://marginaleffects.com/bonus/hypothesis.html}{this website}.
Will be passed to the \code{hypothesis} argument in \code{marginaleffects::avg_predictions()}.}

\item{ci}{Level for confidence intervals.}

\item{...}{Other arguments passed, for instance, to \code{\link[insight:get_datagrid]{insight::get_datagrid()}}
or \code{\link[marginaleffects:predictions]{marginaleffects::avg_predictions()}}.}

\item{trend}{A character indicating the name of the variable
for which to compute the slopes.}

\item{transform}{Deprecated, please use \code{predict} instead.}
}
\description{
The \code{get_marginalmeans()} function is a wrapper to facilitate the usage of
\code{marginaleffects::avg_predictions()} and \code{marginaleffects::avg_slopes()},
providing a somewhat simpler and intuitive API to find the specifications and
variables of interest. It is meanly made to for the developers to facilitate
the organization and debugging, and end-users should rather use the
\verb{estimate_*()} series of functions.
}
\examples{
\dontshow{if (insight::check_if_installed("marginaleffects", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
model <- lm(Sepal.Width ~ Species * Petal.Length, data = iris)

get_marginaleffects(model, trend = "Petal.Length", by = "Species")
get_marginaleffects(model, trend = "Petal.Length", by = "Petal.Length")
get_marginaleffects(model, trend = "Petal.Length", by = c("Species", "Petal.Length"))
\dontshow{\}) # examplesIf}
\dontshow{if (insight::check_if_installed("marginaleffects", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
model <- lm(Sepal.Length ~ Species + Petal.Width, data = iris)

# By default, 'by' is set to "Species"
get_marginalmeans(model)

# Overall mean (close to 'mean(iris$Sepal.Length)')
get_marginalmeans(model, by = NULL)

# One can estimate marginal means at several values of a 'modulate' variable
get_marginalmeans(model, by = "Petal.Width", length = 3)

# Interactions
model <- lm(Sepal.Width ~ Species * Petal.Length, data = iris)

get_marginalmeans(model)
get_marginalmeans(model, by = c("Species", "Petal.Length"), length = 2)
get_marginalmeans(model, by = c("Species", "Petal.Length = c(1, 3, 5)"), length = 2)
\dontshow{\}) # examplesIf}
}
