% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_emcontrasts.R, R/get_emmeans.R,
%   R/get_emtrends.R
\name{get_emcontrasts}
\alias{get_emcontrasts}
\alias{get_emmeans}
\alias{get_emtrends}
\title{Easy 'emmeans' and 'emtrends'}
\usage{
get_emcontrasts(
  model,
  contrast = NULL,
  by = NULL,
  predict = NULL,
  method = "pairwise",
  transform = NULL,
  ...
)

get_emmeans(model, by = "auto", predict = NULL, transform = NULL, ...)

get_emtrends(model, trend = NULL, by = NULL, ...)
}
\arguments{
\item{model}{A statistical model.}

\item{contrast}{A character vector indicating the name of the variable(s)
for which to compute the contrasts.}

\item{by}{The predictor variable(s) at which to evaluate the desired effect
/ mean / contrasts. Other predictors of the model that are not included
here will be collapsed and "averaged" over (the effect will be estimated
across them).}

\item{predict}{Is passed to the \code{type} argument in \code{emmeans::emmeans()}. See
\href{https://CRAN.R-project.org/package=emmeans/vignettes/transformations.html}{this vignette}.
Can be \code{"response"}, \code{"link"} or other option supported such as \code{"mu"},
\code{"unlink"}, \code{"log"}. If \code{predict = NULL} (default), the most appropriate
transformation is selected (which usually is \code{"response"}). \code{"link"} will
leave the values on scale of the linear predictors. \code{"response"} will
transform them on scale of the response variable. Thus for a logistic model,
\code{"link"} will give estimations expressed in log-odds (probabilities on logit
scale) and \code{"response"} in terms of probabilities. To predict distributional
parameters (called "dpar" in other packages), for instance when using complex
formulae in \code{brms} models, the \code{predict} argument can take the value of the
parameter you want to estimate, for instance \code{"sigma"}, \code{"kappa"}, etc.}

\item{method}{Contrast method. See same argument in \link[emmeans:contrast]{emmeans::contrast}.}

\item{transform}{Deprecated, please use \code{predict} instead.}

\item{...}{Other arguments passed for instance to \code{\link[insight:get_datagrid]{insight::get_datagrid()}}.}

\item{trend}{A character indicating the name of the variable
for which to compute the slopes.}
}
\description{
The \code{get_emmeans()} function is a wrapper to facilitate the usage of
\code{emmeans::emmeans()} and \code{emmeans::emtrends()}, providing a somewhat simpler
and intuitive API to find the specifications and variables of interest. It is
meanly made to for the developers to facilitate the organization and
debugging, and end-users should rather use the \verb{estimate_*()} series of
functions.
}
\examples{
\dontshow{if (insight::check_if_installed("emmeans", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# Basic usage
model <- lm(Sepal.Width ~ Species, data = iris)
get_emcontrasts(model)

# Dealing with interactions
model <- lm(Sepal.Width ~ Species * Petal.Width, data = iris)
# By default: selects first factor
get_emcontrasts(model)
# Can also run contrasts between points of numeric
get_emcontrasts(model, contrast = "Petal.Width", length = 3)
# Or both
get_emcontrasts(model, contrast = c("Species", "Petal.Width"), length = 2)
# Or with custom specifications
estimate_contrasts(model, contrast = c("Species", "Petal.Width=c(1, 2)"))
# Or modulate it
get_emcontrasts(model, by = "Petal.Width", length = 4)
\dontshow{\}) # examplesIf}
\dontshow{if (require("emmeans", quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
model <- lm(Sepal.Length ~ Species + Petal.Width, data = iris)

# By default, 'by' is set to "Species"
get_emmeans(model)

# Overall mean (close to 'mean(iris$Sepal.Length)')
get_emmeans(model, by = NULL)

# One can estimate marginal means at several values of a 'modulate' variable
get_emmeans(model, by = "Petal.Width", length = 3)

# Interactions
model <- lm(Sepal.Width ~ Species * Petal.Length, data = iris)

get_emmeans(model)
get_emmeans(model, by = c("Species", "Petal.Length"), length = 2)
get_emmeans(model, by = c("Species", "Petal.Length = c(1, 3, 5)"), length = 2)
\dontshow{\}) # examplesIf}
if (require("emmeans")) {
  model <- lm(Sepal.Width ~ Species * Petal.Length, data = iris)

  get_emtrends(model)
  get_emtrends(model, by = "Species")
  get_emtrends(model, by = "Petal.Length")
  get_emtrends(model, by = c("Species", "Petal.Length"))

  model <- lm(Petal.Length ~ poly(Sepal.Width, 4), data = iris)
  get_emtrends(model)
  get_emtrends(model, by = "Sepal.Width")
}
}
